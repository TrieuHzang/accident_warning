#define BLYNK_TEMPLATE_ID "TMPL6LZ4sAz_g"
#define BLYNK_TEMPLATE_NAME "canhbao"
#define BLYNK_AUTH_TOKEN "tSj2GkQsaSLXVIS-B65MM2k3lVwK2Fhj"

#include <Wire.h>
#include <MPU6050_light.h>
#include <TinyGPSPlus.h>
#include <WiFi.h>
#include <HardwareSerial.h>
#include <BlynkSimpleEsp32.h>
#include <math.h>

// ===== C·∫§U H√åNH WIFI V√Ä BLYNK =====  
char auth[] = BLYNK_AUTH_TOKEN;
char ssid[] = "Choang";
char pass[] = "choang1313:)";

MPU6050 camBienMPU(Wire);
TinyGPSPlus gps;
HardwareSerial gpsSerial(2);

const int ledPin = 2;
const int buzzerPin = 4;

const float nguongGiaToc = 1.0;
const float nguongDoNghieng = 50.0;

bool taiNanDuocXacNhan = false;
bool dangCanhBao = false;
unsigned long thoiGianCanhBao = 0;

void setup() {
  Serial.begin(115200);
  Wire.begin(21, 22);
  gpsSerial.begin(9600, SERIAL_8N1, 16, 17);

  pinMode(ledPin, OUTPUT);
  pinMode(buzzerPin, OUTPUT);
  digitalWrite(ledPin, LOW);
  digitalWrite(buzzerPin, LOW);

  Serial.println("‚è≥ ƒêang k·∫øt n·ªëi WiFi...");
  WiFi.begin(ssid, pass);

  unsigned long batDau = millis();
  while (WiFi.status() != WL_CONNECTED) {
    Serial.print(".");
    delay(500);
    if (millis() - batDau > 20000) {  // Timeout 20s
      Serial.println("\n‚ùå K·∫øt n·ªëi WiFi th·∫•t b·∫°i, vui l√≤ng ki·ªÉm tra m·∫°ng ho·∫∑c m·∫≠t kh·∫©u.");
      while (1);  // D·ª´ng l·∫°i ƒë·ªÉ debug
    }
  }

  Serial.println("\n‚úÖ WiFi ƒë√£ k·∫øt n·ªëi.");
  Serial.print("IP: ");
  Serial.println(WiFi.localIP());

  Serial.println("‚è≥ ƒêang k·∫øt n·ªëi Blynk...");
  Blynk.begin(auth, ssid, pass);  // D√πng Blynk.begin ƒë·ªÉ ESP32 t·ª± gi·ªØ k·∫øt n·ªëi

  Serial.println("‚úÖ ƒêang ch·∫°y Blynk v√† c·∫£m bi·∫øn...");

  byte trangThaiMPU = camBienMPU.begin();
  if (trangThaiMPU != 0) {
    Serial.println("‚ùå Kh√¥ng t√¨m th·∫•y MPU6050!");
    while (1);
  }
  camBienMPU.calcGyroOffsets();
  Serial.println("‚úÖ MPU6050 s·∫µn s√†ng");

  Serial.print("üì° ƒêang ki·ªÉm tra GPS");
  unsigned long batDauGPS = millis();
  while (millis() - batDauGPS < 10000) {
    while (gpsSerial.available()) {
      gps.encode(gpsSerial.read());
      if (gps.location.isValid()) {
        Serial.println("\n‚úÖ GPS s·∫µn s√†ng");
        return;
      }
    }
    Serial.print(".");
    delay(500);
  }
  Serial.println("\n‚ö†Ô∏è GPS kh√¥ng kh·∫£ d·ª•ng trong 10 gi√¢y ƒë·∫ßu");
}

void loop() {
  Blynk.run();
  camBienMPU.update();

  while (gpsSerial.available()) {
    gps.encode(gpsSerial.read());
  }

  float ax = camBienMPU.getAccX();
  float ay = camBienMPU.getAccY();
  float az = camBienMPU.getAccZ();
  float giaTocRong = sqrt(ax * ax + ay * ay + az * az) - 1.0;
  float gocX = camBienMPU.getAccAngleX();
  float gocY = camBienMPU.getAccAngleY();

  Serial.print("Gia t·ªëc r√≤ng: ");
  Serial.print(giaTocRong);
  Serial.print(" | G√≥c X: ");
  Serial.print(gocX);
  Serial.print(" | G√≥c Y: ");
  Serial.println(gocY);

  if (gps.location.isValid()) {
    float vanToc = gps.speed.kmph();
    float kinhDo = gps.location.lng();
    float viDo = gps.location.lat();

    String vanTocStr = String((int)vanToc);
    String kinhDoStr = String(kinhDo, 6);
    String viDoStr = String(viDo, 6);
    String linkViTri = "https://maps.google.com/?q=" + viDoStr + "," + kinhDoStr;

    Blynk.virtualWrite(V0, vanTocStr.toInt());
    Blynk.virtualWrite(V1, kinhDoStr);
    Blynk.virtualWrite(V2, viDoStr);
    Blynk.virtualWrite(V3, linkViTri);
  }

  if (giaTocRong > nguongGiaToc && !dangCanhBao) {
    Serial.println("‚ö†Ô∏è Gia t·ªëc l·ªõn! Theo d√µi g√≥c nghi√™ng 10 gi√¢y...");

    unsigned long batDauTheoDoi = millis();
    bool phatHienNghiengManh = false;

    while (millis() - batDauTheoDoi < 10000) {
      camBienMPU.update();
      while (gpsSerial.available()) {
        gps.encode(gpsSerial.read());
      }

      float gocX = abs(camBienMPU.getAngleX());
      float gocY = abs(camBienMPU.getAngleY());

      if (gocX > nguongDoNghieng || gocY > nguongDoNghieng) {
        phatHienNghiengManh = true;
        break;
      }
      delay(50);
    }

    if (phatHienNghiengManh) {
      Serial.println("‚úÖ G√≥c nghi√™ng l·ªõn ph√°t hi·ªán! Ki·ªÉm tra duy tr√¨ 5s...");

      unsigned long batDauNghiengLienTuc = millis();
      bool duocDuyTri5s = true;

      while (millis() - batDauNghiengLienTuc < 5000) {
        camBienMPU.update();
        while (gpsSerial.available()) {
          gps.encode(gpsSerial.read());
        }

        float gocX = abs(camBienMPU.getAngleX());
        float gocY = abs(camBienMPU.getAngleY());

        if (gocX < nguongDoNghieng && gocY < nguongDoNghieng) {
          duocDuyTri5s = false;
          Serial.println("‚ùå G√≥c nghi√™ng b·ªã gi√°n ƒëo·∫°n!");
          break;
        }
        delay(100);
      }

      if (duocDuyTri5s) {
        taiNanDuocXacNhan = true;
        Serial.println("üö® Tai n·∫°n ƒë√£ x√°c nh·∫≠n!");
      }
    } else {
      Serial.println("‚ùå Kh√¥ng ph√°t hi·ªán nghi√™ng m·∫°nh.");
    }
  }

  if (taiNanDuocXacNhan && !dangCanhBao) {
    digitalWrite(ledPin, HIGH);
    digitalWrite(buzzerPin, HIGH);
    dangCanhBao = true;
    thoiGianCanhBao = millis();

    String msg = "üö® Tai n·∫°n ƒë∆∞·ª£c ph√°t hi·ªán!\n";

    if (gps.location.isValid()) {
      msg += "üìç V·ªã tr√≠: https://maps.google.com/?q=" +
             String(gps.location.lat(), 6) + "," + String(gps.location.lng(), 6);
    } else {
      msg += "‚ö†Ô∏è Kh√¥ng c√≥ t√≠n hi·ªáu GPS.";
    }

    if (gps.date.isValid() && gps.time.isValid()) {
      int gioVN = (gps.time.hour() + 7) % 24;
      char thoiGianStr[30];
      sprintf(thoiGianStr, "%02d/%02d/%04d %02d:%02d:%02d",
              gps.date.day(), gps.date.month(), gps.date.year(),
              gioVN, gps.time.minute(), gps.time.second());
      msg += "\n‚è∞ Th·ªùi ƒëi·ªÉm: " + String(thoiGianStr);
    } else {
      msg += "\n‚è∞ Th·ªùi ƒëi·ªÉm: kh√¥ng x√°c ƒë·ªãnh";
    }

    Blynk.logEvent("phat_hien_tai_nan", msg);
    Blynk.virtualWrite(V1, msg);
  }

  if (dangCanhBao && millis() - thoiGianCanhBao > 30000) {
    digitalWrite(ledPin, LOW);
    digitalWrite(buzzerPin, LOW);
    taiNanDuocXacNhan = false;
    dangCanhBao = false;
    Serial.println("‚úÖ ƒê√£ t·∫Øt c·∫£nh b√°o.");
  }

  delay(1000);
}
